package executable;

import domain.Opcode;
import domain.Word;

public class Programas {
        public Word[] fatorial = new Word[] {
                        new Word(Opcode.LDI, 0, -1, 4),
                        new Word(Opcode.LDI, 1, -1, 1),
                        new Word(Opcode.LDI, 6, -1, 1),
                        new Word(Opcode.LDI, 7, -1, 8),
                        new Word(Opcode.JMPIE, 7, 0, 0),
                        new Word(Opcode.MULT, 1, 0, -1),
                        new Word(Opcode.SUB, 0, 6, -1),
                        new Word(Opcode.JMP, -1, -1, 4),
                        new Word(Opcode.STD, 1, -1, 10),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1) };

        public Word[] progMinimo = new Word[] {
                        new Word(Opcode.LDI, 0, -1, 999),
                        new Word(Opcode.STD, 0, -1, 10),
                        new Word(Opcode.STD, 0, -1, 11),
                        new Word(Opcode.STD, 0, -1, 12),
                        new Word(Opcode.STD, 0, -1, 13),
                        new Word(Opcode.STD, 0, -1, 14),
                        new Word(Opcode.STOP, -1, -1, -1) };

        public Word[] fibonacci10 = new Word[] {
                        new Word(Opcode.LDI, 1, -1, 0),
                        new Word(Opcode.STD, 1, -1, 20),
                        new Word(Opcode.LDI, 2, -1, 1),
                        new Word(Opcode.STD, 2, -1, 21),
                        new Word(Opcode.LDI, 0, -1, 22),
                        new Word(Opcode.LDI, 6, -1, 6),
                        new Word(Opcode.LDI, 7, -1, 31),
                        new Word(Opcode.LDI, 3, -1, 0),
                        new Word(Opcode.ADD, 3, 1, -1),
                        new Word(Opcode.LDI, 1, -1, 0),
                        new Word(Opcode.ADD, 1, 2, -1),
                        new Word(Opcode.ADD, 2, 3, -1),
                        new Word(Opcode.STX, 0, 2, -1),
                        new Word(Opcode.ADDI, 0, -1, 1),
                        new Word(Opcode.SUB, 7, 0, -1),
                        new Word(Opcode.JMPIG, 6, 7, -1),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1)
        };

        public Word[] paInput = new Word[] {
                        new Word(Opcode.LDI, 8, -1, 1),
                        new Word(Opcode.LDI, 9, -1, 21),
                        new Word(Opcode.TRAP, -1, -1, -1),
                        new Word(Opcode.LDD, 0, -1, 21),
                        new Word(Opcode.STD, 0, -1, 17),
                        new Word(Opcode.LDD, 1, -1, 17),
                        new Word(Opcode.SUBI, 1, -1, 1),

                        new Word(Opcode.LDI, 2, -1, 41),

                        new Word(Opcode.LDI, 7, -1, 27),
                        new Word(Opcode.JMPIL, 7, 1, -1),

                        new Word(Opcode.LDI, 5, -1, 1),
                        new Word(Opcode.STX, 2, 5, -1),

                        new Word(Opcode.SUBI, 1, -1, 1),
                        new Word(Opcode.LDI, 7, -1, 29),
                        new Word(Opcode.JMPIL, 7, 1, -1),
                        new Word(Opcode.ADDI, 2, -1, 1),
                        new Word(Opcode.LDI, 6, -1, 1),
                        new Word(Opcode.STX, 2, 6, -1),
                        new Word(Opcode.SUBI, 1, -1, 1),
                        new Word(Opcode.JMPIL, 7, 1, -1),
                        new Word(Opcode.ADDI, 2, -1, 1),
                        new Word(Opcode.ADD, 5, 6, -1),

                        new Word(Opcode.STX, 2, 6, -1),
                        new Word(Opcode.LDI, 4, -1, 18),
                        new Word(Opcode.JMPIG, 4, 1, -1),

                        new Word(Opcode.JMPIL, 7, 1, -1),

                        new Word(Opcode.LDI, 3, -1, -1),
                        new Word(Opcode.STX, 2, 3, -1),

                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1)
        };

        public Word[] pbOutput = new Word[] {
                        new Word(Opcode.LDI, 0, -1, 3),
                        new Word(Opcode.STD, 0, -1, 26),
                        new Word(Opcode.LDD, 1, -1, 26),
                        new Word(Opcode.LDI, 5, -1, 13),
                        new Word(Opcode.JMPIL, 5, 1, -1),

                        new Word(Opcode.LDD, 2, -1, 26),
                        new Word(Opcode.SUBI, 1, -1, 1),
                        new Word(Opcode.MULT, 2, 1, -1),
                        new Word(Opcode.SUBI, 1, -1, 1),
                        new Word(Opcode.LDI, 6, -1, 7),
                        new Word(Opcode.JMPIG, 6, 1, -1),

                        new Word(Opcode.STD, 2, -1, 25),

                        new Word(Opcode.JMP, -1, -1, 15),
                        new Word(Opcode.LDI, 1, -1, -1),
                        new Word(Opcode.STD, 1, -1, 25),
                        new Word(Opcode.LDI, 8, -1, 2),
                        new Word(Opcode.LDI, 9, -1, 25),

                        new Word(Opcode.TRAP, -1, -1, -1),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
        };

        public Word[] fatorialTRAP = new Word[] {
                        new Word(Opcode.LDI, 0, -1, 7),
                        new Word(Opcode.STD, 0, -1, 17),
                        new Word(Opcode.LDD, 0, -1, 17),
                        new Word(Opcode.LDI, 1, -1, -1),
                        new Word(Opcode.LDI, 2, -1, 13),
                        new Word(Opcode.JMPIL, 2, 0, -1),
                        new Word(Opcode.LDI, 1, -1, 1),
                        new Word(Opcode.LDI, 6, -1, 1),
                        new Word(Opcode.LDI, 7, -1, 13),
                        new Word(Opcode.JMPIE, 7, 0, 0),
                        new Word(Opcode.MULT, 1, 0, -1),
                        new Word(Opcode.SUB, 0, 6, -1),
                        new Word(Opcode.JMP, -1, -1, 9),
                        new Word(Opcode.STD, 1, -1, 18),
                        new Word(Opcode.LDI, 8, -1, 2),
                        new Word(Opcode.LDI, 9, -1, 18),
                        new Word(Opcode.TRAP, -1, -1, -1),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1) };

        public Word[] fibonacciTRAP = new Word[] {
                        new Word(Opcode.LDI, 8, -1, 1),
                        new Word(Opcode.LDI, 9, -1, 45),
                        new Word(Opcode.TRAP, -1, -1, -1),
                        new Word(Opcode.LDD, 7, -1, 45),
                        new Word(Opcode.LDI, 3, -1, 0),
                        new Word(Opcode.ADD, 3, 7, -1),
                        new Word(Opcode.LDI, 4, -1, 36),
                        new Word(Opcode.LDI, 1, -1, -1),
                        new Word(Opcode.STD, 1, -1, 41),
                        new Word(Opcode.JMPIL, 4, 7, -1),
                        new Word(Opcode.JMPIE, 4, 7, -1),
                        new Word(Opcode.ADDI, 7, -1, 41),
                        new Word(Opcode.LDI, 1, -1, 0),
                        new Word(Opcode.STD, 1, -1, 41),
                        new Word(Opcode.SUBI, 3, -1, 1),
                        new Word(Opcode.JMPIE, 4, 3, -1),
                        new Word(Opcode.ADDI, 3, -1, 1),
                        new Word(Opcode.LDI, 2, -1, 1),
                        new Word(Opcode.STD, 2, -1, 42),
                        new Word(Opcode.SUBI, 3, -1, 2),
                        new Word(Opcode.JMPIE, 4, 3, -1),
                        new Word(Opcode.LDI, 0, -1, 43),
                        new Word(Opcode.LDI, 6, -1, 25),
                        new Word(Opcode.LDI, 5, -1, 0),
                        new Word(Opcode.ADD, 5, 7, -1),
                        new Word(Opcode.LDI, 7, -1, 0),
                        new Word(Opcode.ADD, 7, 5, -1),
                        new Word(Opcode.LDI, 3, -1, 0),
                        new Word(Opcode.ADD, 3, 1, -1),
                        new Word(Opcode.LDI, 1, -1, 0),
                        new Word(Opcode.ADD, 1, 2, -1),
                        new Word(Opcode.ADD, 2, 3, -1),
                        new Word(Opcode.STX, 0, 2, -1),
                        new Word(Opcode.ADDI, 0, -1, 1),
                        new Word(Opcode.SUB, 7, 0, -1),
                        new Word(Opcode.JMPIG, 6, 7, -1),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1)
        };

        public Word[] PB = new Word[] {

                        new Word(Opcode.LDI, 0, -1, -51),
                        new Word(Opcode.STD, 0, -1, 16),
                        new Word(Opcode.LDD, 0, -1, 16),
                        new Word(Opcode.LDI, 1, -1, -1),
                        new Word(Opcode.LDI, 2, -1, 13),
                        new Word(Opcode.JMPIL, 2, 0, -1),
                        new Word(Opcode.LDI, 1, -1, 1),
                        new Word(Opcode.LDI, 6, -1, 1),
                        new Word(Opcode.LDI, 7, -1, 13),
                        new Word(Opcode.JMPIE, 7, 0, 0),
                        new Word(Opcode.MULT, 1, 0, -1),
                        new Word(Opcode.SUB, 0, 6, -1),
                        new Word(Opcode.JMP, -1, -1, 9),
                        new Word(Opcode.STD, 1, -1, 15),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1) };

        public Word[] PC = new Word[] {

                        new Word(Opcode.LDI, 7, -1, 5),
                        new Word(Opcode.LDI, 6, -1, 5),
                        new Word(Opcode.LDI, 5, -1, 46),
                        new Word(Opcode.LDI, 4, -1, 47),
                        new Word(Opcode.LDI, 0, -1, 4),
                        new Word(Opcode.STD, 0, -1, 46),
                        new Word(Opcode.LDI, 0, -1, 3),
                        new Word(Opcode.STD, 0, -1, 47),
                        new Word(Opcode.LDI, 0, -1, 5),
                        new Word(Opcode.STD, 0, -1, 48),
                        new Word(Opcode.LDI, 0, -1, 1),
                        new Word(Opcode.STD, 0, -1, 49),
                        new Word(Opcode.LDI, 0, -1, 2),
                        new Word(Opcode.STD, 0, -1, 50),
                        new Word(Opcode.LDI, 3, -1, 25),
                        new Word(Opcode.STD, 3, -1, 57),
                        new Word(Opcode.LDI, 3, -1, 22),
                        new Word(Opcode.STD, 3, -1, 56),
                        new Word(Opcode.LDI, 3, -1, 38),
                        new Word(Opcode.STD, 3, -1, 55),
                        new Word(Opcode.LDI, 3, -1, 25),
                        new Word(Opcode.STD, 3, -1, 54),
                        new Word(Opcode.LDI, 6, -1, 0),
                        new Word(Opcode.ADD, 6, 7, -1),
                        new Word(Opcode.SUBI, 6, -1, 1),
                        new Word(Opcode.JMPIEM, -1, 6, 55),
                        new Word(Opcode.LDX, 0, 5, -1),
                        new Word(Opcode.LDX, 1, 4, -1),
                        new Word(Opcode.LDI, 2, -1, 0),
                        new Word(Opcode.ADD, 2, 0, -1),
                        new Word(Opcode.SUB, 2, 1, -1),
                        new Word(Opcode.ADDI, 4, -1, 1),
                        new Word(Opcode.SUBI, 6, -1, 1),
                        new Word(Opcode.JMPILM, -1, 2, 57),
                        new Word(Opcode.STX, 5, 1, -1),
                        new Word(Opcode.SUBI, 4, -1, 1),
                        new Word(Opcode.STX, 4, 0, -1),
                        new Word(Opcode.ADDI, 4, -1, 1),
                        new Word(Opcode.JMPIGM, -1, 6, 57),
                        new Word(Opcode.ADDI, 5, -1, 1),
                        new Word(Opcode.SUBI, 7, -1, 1),
                        new Word(Opcode.LDI, 4, -1, 0),
                        new Word(Opcode.ADD, 4, 5, -1),
                        new Word(Opcode.ADDI, 4, -1, 1),
                        new Word(Opcode.JMPIGM, -1, 7, 56),
                        new Word(Opcode.STOP, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),

                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1),
                        new Word(Opcode.DATA, -1, -1, -1) };
}